module MiniJuvix.Utils.Prelude
  ( String,
    module Protolude,
    Semiring (..),
  )
where

--------------------------------------------------------------------------------

import Protolude
    ( (++),
      seq,
      filter,
      zip,
      fst,
      snd,
      otherwise,
      ($),
      fromIntegral,
      realToFrac,
      guard,
      join,
      Bounded(..),
      Enum(..),
      Eq(..),
      Floating(..),
      Fractional(..),
      Integral(..),
      Monad(..),
      Functor(..),
      Num(..),
      Ord(..),
      Read,
      Real(..),
      RealFloat(..),
      RealFrac(..),
      Show,
      Typeable,
      MonadFail,
      IsString,
      Applicative(..),
      Foldable(..),
      Traversable(..),
      Generic(..),
      Generic1,
      Datatype(..),
      Constructor(..),
      Selector(..),
      KnownNat,
      KnownSymbol,
      IsLabel(..),
      Semigroup(..),
      Monoid(..),
      HasField(..),
      Bool(..),
      Char,
      Double(..),
      Float(..),
      Int,
      Int8,
      Int16,
      Int32,
      Int64,
      Integer,
      Maybe(..),
      Ordering(..),
      Ratio,
      Rational,
      StablePtr,
      IO,
      Word,
      Word8,
      Word16,
      Word32,
      Word64,
      Ptr,
      FunPtr,
      Either(..),
      Type,
      Constraint,
      V1,
      U1(..),
      K1(..),
      M1(..),
      type (:+:)(..),
      type (:*:)(..),
      type (:.:)(..),
      Rec0,
      D1,
      C1,
      S1,
      URec,
      Nat,
      Symbol,
      CmpNat,
      Coercible,
      StaticPtr,
      CallStack,
      (&&),
      NonEmpty(..),
      FilePath,
      optional,
      forkFinally,
      forkOS,
      forkOSWithUnmask,
      isCurrentThreadBound,
      rtsSupportsBoundThreads,
      runInBoundThread,
      runInUnboundThread,
      threadWaitRead,
      threadWaitReadSTM,
      threadWaitWrite,
      threadWaitWriteSTM,
      dupChan,
      getChanContents,
      newChan,
      readChan,
      writeChan,
      writeList2Chan,
      addMVarFinalizer,
      mkWeakMVar,
      modifyMVar,
      modifyMVarMasked,
      modifyMVarMasked_,
      modifyMVar_,
      swapMVar,
      withMVar,
      withMVarMasked,
      newQSem,
      signalQSem,
      waitQSem,
      newQSemN,
      signalQSemN,
      waitQSemN,
      allowInterrupt,
      catches,
      bracket,
      bracketOnError,
      bracket_,
      catchJust,
      finally,
      handle,
      handleJust,
      mapException,
      onException,
      try,
      tryJust,
      (<$!>),
      (<=<),
      (>=>),
      filterM,
      foldM,
      foldM_,
      forever,
      mapAndUnzipM,
      mfilter,
      replicateM,
      replicateM_,
      unless,
      zipWithM,
      zipWithM_,
      fixST,
      bitDefault,
      popCountDefault,
      testBitDefault,
      toIntegralSized,
      digitToInt,
      isLetter,
      cis,
      conjugate,
      imagPart,
      magnitude,
      mkPolar,
      phase,
      polar,
      realPart,
      either,
      fromLeft,
      fromRight,
      isLeft,
      isRight,
      lefts,
      partitionEithers,
      rights,
      all,
      and,
      any,
      asum,
      concat,
      concatMap,
      find,
      foldlM,
      foldrM,
      forM_,
      for_,
      mapM_,
      maximumBy,
      minimumBy,
      msum,
      notElem,
      or,
      sequenceA_,
      sequence_,
      traverse_,
      (&),
      fix,
      on,
      ($>),
      (<$>),
      (<&>),
      void,
      nonEmpty,
      catMaybes,
      fromMaybe,
      isJust,
      isNothing,
      listToMaybe,
      mapMaybe,
      maybe,
      maybeToList,
      genericDrop,
      genericLength,
      genericReplicate,
      genericSplitAt,
      genericTake,
      group,
      groupBy,
      inits,
      intercalate,
      intersperse,
      isPrefixOf,
      permutations,
      sort,
      sortBy,
      subsequences,
      tails,
      transpose,
      unfoldr,
      comparing,
      cycle1,
      diff,
      mtimesDefault,
      option,
      stimesIdempotent,
      stimesIdempotentMonoid,
      stimesMonoid,
      fmapDefault,
      foldMapDefault,
      for,
      forM,
      mapAccumL,
      mapAccumR,
      curry,
      swap,
      uncurry,
      coerceWith,
      repr,
      castWith,
      gcastWith,
      sym,
      trans,
      cast,
      eqT,
      gcast,
      typeOf,
      typeRep,
      absurd,
      vacuous,
      (.),
      (<**>),
      (=<<),
      ap,
      asTypeOf,
      const,
      flip,
      liftA,
      liftA3,
      liftM,
      liftM2,
      liftM3,
      liftM4,
      liftM5,
      maxInt,
      minInt,
      ord,
      until,
      when,
      chr,
      threadDelay,
      atomically,
      catchSTM,
      forkIO,
      forkIOWithUnmask,
      forkOn,
      forkOnWithUnmask,
      getNumCapabilities,
      killThread,
      mkWeakThreadId,
      myThreadId,
      orElse,
      retry,
      setNumCapabilities,
      threadCapability,
      throwSTM,
      yield,
      boundedEnumFrom,
      boundedEnumFromThen,
      prettyCallStack,
      prettySrcLoc,
      getStackTrace,
      showStackTrace,
      catch,
      evaluate,
      getMaskingState,
      interruptible,
      mask,
      mask_,
      uninterruptibleMask,
      uninterruptibleMask_,
      asyncExceptionFromException,
      asyncExceptionToException,
      ioError,
      openFile,
      stderr,
      stdin,
      stdout,
      break,
      cycle,
      drop,
      dropWhile,
      iterate,
      repeat,
      replicate,
      reverse,
      scanl,
      scanl',
      scanr,
      splitAt,
      take,
      takeWhile,
      unzip,
      zipWith,
      isEmptyMVar,
      newEmptyMVar,
      newMVar,
      putMVar,
      readMVar,
      takeMVar,
      tryPutMVar,
      tryReadMVar,
      tryTakeMVar,
      subtract,
      (%),
      (^),
      (^%^),
      (^^),
      (^^%^^),
      denominator,
      divZeroError,
      even,
      gcd,
      gcdInt',
      gcdWord',
      infinity,
      integralEnumFrom,
      integralEnumFromThen,
      integralEnumFromThenTo,
      integralEnumFromTo,
      lcm,
      notANumber,
      numerator,
      numericEnumFrom,
      numericEnumFromThen,
      numericEnumFromThenTo,
      numericEnumFromTo,
      odd,
      overflowError,
      ratioPrec,
      ratioPrec1,
      ratioZeroDenominatorError,
      reduce,
      underflowError,
      runST,
      intToDigit,
      callStack,
      withFrozenCallStack,
      currentCallStack,
      getCallStack,
      natVal,
      someNatVal,
      someSymbolVal,
      symbolVal,
      isAlpha,
      isAlphaNum,
      isAscii,
      isControl,
      isDigit,
      isHexDigit,
      isLower,
      isPrint,
      isSpace,
      isUpper,
      toLower,
      toTitle,
      toUpper,
      byteSwap16,
      byteSwap32,
      byteSwap64,
      getArgs,
      exitFailure,
      exitSuccess,
      exitWith,
      withFile,
      readEither,
      readMaybe,
      reads,
      ($!!),
      deepseq,
      force,
      not,
      (||),
      hashUsing,
      asks,
      gets,
      modify,
      applyN,
      die,
      guarded,
      guardedA,
      identity,
      liftIO1,
      liftIO2,
      map,
      pass,
      print,
      show,
      throwIO,
      throwTo,
      uncons,
      unsnoc,
      (<<*>>),
      eitherA,
      liftAA2,
      orAlt,
      orEmpty,
      purer,
      ($!),
      (&&^),
      (<&&>),
      (<||>),
      bool,
      guardM,
      ifM,
      unlessM,
      whenM,
      (||^),
      toUtf8,
      toUtf8Lazy,
      notImplemented,
      trace,
      traceIO,
      traceId,
      traceM,
      traceShow,
      traceShowId,
      traceShowM,
      undefined,
      witness,
      leftToMaybe,
      maybeEmpty,
      maybeToEither,
      maybeToLeft,
      maybeToRight,
      rightToMaybe,
      hush,
      note,
      tryIO,
      (<<$>>),
      foreach,
      head,
      list,
      ordNub,
      product,
      sortOn,
      sum,
      concatMapM,
      liftM',
      liftM2',
      panic,
      atDef,
      atMay,
      foldl1May,
      foldl1May',
      foldr1May,
      headDef,
      headMay,
      initDef,
      initMay,
      initSafe,
      lastDef,
      lastMay,
      maximumDef,
      maximumMay,
      minimumDef,
      minimumMay,
      tailDef,
      tailMay,
      tailSafe,
      zero,
      putByteString,
      putErrText,
      putLByteString,
      putLText,
      putText,
      check,
      async,
      asyncBound,
      asyncOn,
      cancel,
      cancelWith,
      concurrently,
      link,
      link2,
      poll,
      race,
      race_,
      wait,
      waitAny,
      waitAnyCancel,
      waitAnyCatch,
      waitAnyCatchCancel,
      waitBoth,
      waitCatch,
      waitEither,
      waitEitherCancel,
      waitEitherCatch,
      waitEitherCatchCancel,
      waitEither_,
      withAsync,
      withAsyncBound,
      withAsyncOn,
      lines,
      unlines,
      unwords,
      words,
      decodeUtf8,
      decodeUtf8',
      decodeUtf8With,
      encodeUtf8,
      ignore,
      lenientDecode,
      replace,
      strictDecode,
      appendFile,
      getContents,
      getLine,
      interact,
      readFile,
      writeFile,
      fromStrict,
      toStrict,
      catchE,
      mapExcept,
      mapExceptT,
      runExcept,
      runExceptT,
      throwE,
      withExcept,
      withExceptT,
      runReader,
      evalState,
      evalStateT,
      execState,
      execStateT,
      runState,
      withState,
      ZipList(..),
      Chan,
      QSem,
      QSemN,
      Handler(..),
      NestedAtomically(..),
      NoMethodError(..),
      NonTermination(..),
      PatternMatchFail(..),
      RecConError(..),
      RecSelError(..),
      RecUpdError(..),
      TypeError(..),
      MonadIO(..),
      Bifunctor(..),
      Bits(..),
      FiniteBits(..),
      Complex(..),
      Const(..),
      Identity(..),
      Ap(..),
      First(..),
      Last(..),
      Down(..),
      Proxy(..),
      Option(..),
      WrappedMonoid,
      All(..),
      Alt(..),
      Any(..),
      Dual(..),
      Endo(..),
      Product(..),
      Sum(..),
      Coercion(..),
      type (:~:)(..),
      type (==),
      TypeRep,
      Void,
      IntPtr,
      WordPtr,
      Storable,
      Alternative(..),
      MonadPlus(..),
      STM,
      ThreadId,
      ErrorCall(..),
      ArithException(..),
      Exception(..),
      SomeException(..),
      Location(..),
      SrcLoc(..),
      Associativity(..),
      Fixity(..),
      FixityI(..),
      Meta(..),
      MaskingState(..),
      AllocationLimitExceeded(..),
      ArrayException(..),
      AssertionFailed(..),
      AsyncException(..),
      BlockedIndefinitelyOnMVar(..),
      BlockedIndefinitelyOnSTM(..),
      CompactionFailed(..),
      Deadlock(..),
      ExitCode(..),
      IOException,
      SomeAsyncException(..),
      Handle,
      IOMode(..),
      MVar,
      ST,
      HasCallStack,
      SomeSymbol(..),
      SomeNat(..),
      ByteString,
      IntMap,
      IntSet,
      Map,
      Seq,
      Set,
      NFData(..),
      Hashable(..),
      MonadError(..),
      MonadReader(..),
      MonadState(..),
      LByteString,
      LText,
      ConvertText(..),
      FatalError(..),
      Print(..),
      Async(..),
      Concurrently(..),
      OnDecodeError,
      OnError,
      UnicodeException,
      Text,
      lift,
      Except,
      ExceptT(..),
      Reader,
      ReaderT(..),
      State,
      StateT(..) )
import Prelude (String)
import Protolude.Base ()

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Semiring
--------------------------------------------------------------------------------

class Monoid m => Semiring m where
  {-# MINIMAL one, times #-}

  one :: m
  times :: m -> m -> m
