module MiniJuvix.Utils.Prelude
  ( String,
    module Protolude,
    Semiring (..),
  )
where

--------------------------------------------------------------------------------

import Protolude
  ( ($),
    -- Type,

    -- type (:+:)(..),
    -- type (:*:)(..),
    -- type (:.:)(..),

    ($!),
    ($!!),
    ($>),
    (%),
    (&),
    (&&),
    (&&^),
    (++),
    (.),
    (<$!>),
    (<$>),
    (<&&>),
    (<&>),
    (<**>),
    (<<$>>),
    (<<*>>),
    (<=<),
    (<||>),
    (=<<),
    (>=>),
    All (..),
    -- type (:~:)(..),
    -- type (==),

    AllocationLimitExceeded (..),
    Alt (..),
    Alternative (..),
    Any (..),
    Ap (..),
    Applicative (..),
    ArithException (..),
    ArrayException (..),
    AssertionFailed (..),
    Associativity (..),
    Async (..),
    AsyncException (..),
    Bifunctor (..),
    Bits (..),
    BlockedIndefinitelyOnMVar (..),
    BlockedIndefinitelyOnSTM (..),
    Bool (..),
    Bounded (..),
    ByteString,
    C1,
    CallStack,
    Chan,
    Char,
    CmpNat,
    Coercible,
    Coercion (..),
    CompactionFailed (..),
    Complex (..),
    Concurrently (..),
    Const (..),
    Constraint,
    Constructor (..),
    ConvertText (..),
    D1,
    Datatype (..),
    Deadlock (..),
    Double (..),
    Down (..),
    Dual (..),
    Either (..),
    Endo (..),
    Enum (..),
    Eq (..),
    ErrorCall (..),
    Except,
    ExceptT (..),
    Exception (..),
    ExitCode (..),
    FatalError (..),
    FilePath,
    FiniteBits (..),
    First (..),
    Fixity (..),
    FixityI (..),
    Float (..),
    Floating (..),
    Foldable (..),
    Fractional (..),
    FunPtr,
    Functor (..),
    Generic (..),
    Generic1,
    Handle,
    Handler (..),
    HasCallStack,
    HasField (..),
    Hashable (..),
    IO,
    IOException,
    IOMode (..),
    Identity (..),
    Int,
    Int16,
    Int32,
    Int64,
    Int8,
    IntMap,
    IntPtr,
    IntSet,
    Integer,
    Integral (..),
    IsLabel (..),
    IsString,
    K1 (..),
    KnownNat,
    KnownSymbol,
    LByteString,
    LText,
    Last (..),
    Location (..),
    M1 (..),
    MVar,
    Map,
    MaskingState (..),
    Maybe (..),
    Meta (..),
    Monad (..),
    MonadError (..),
    MonadFail,
    MonadIO (..),
    MonadPlus (..),
    MonadReader (..),
    MonadState (..),
    Monoid (..),
    NFData (..),
    Nat,
    NestedAtomically (..),
    NoMethodError (..),
    NonEmpty (..),
    NonTermination (..),
    Num (..),
    OnDecodeError,
    OnError,
    Option (..),
    Ord (..),
    Ordering (..),
    PatternMatchFail (..),
    Print (..),
    Product (..),
    Proxy (..),
    Ptr,
    QSem,
    QSemN,
    Ratio,
    Rational,
    Read,
    Reader,
    ReaderT (..),
    Real (..),
    RealFloat (..),
    RealFrac (..),
    Rec0,
    RecConError (..),
    RecSelError (..),
    RecUpdError (..),
    S1,
    ST,
    STM,
    Selector (..),
    Semigroup (..),
    Seq,
    Set,
    Show,
    SomeAsyncException (..),
    SomeException (..),
    SomeNat (..),
    SomeSymbol (..),
    SrcLoc (..),
    StablePtr,
    State,
    StateT (..),
    StaticPtr,
    Storable,
    Sum (..),
    Symbol,
    Text,
    ThreadId,
    Traversable (..),
    TypeError (..),
    TypeRep,
    Typeable,
    U1 (..),
    URec,
    UnicodeException,
    V1,
    Void,
    Word,
    Word16,
    Word32,
    Word64,
    Word8,
    WordPtr,
    WrappedMonoid,
    ZipList (..),
    (^),
    (^%^),
    (^^),
    (^^%^^),
    absurd,
    addMVarFinalizer,
    all,
    allowInterrupt,
    and,
    any,
    ap,
    appendFile,
    applyN,
    asTypeOf,
    asks,
    asum,
    async,
    asyncBound,
    asyncExceptionFromException,
    asyncExceptionToException,
    asyncOn,
    atDef,
    atMay,
    atomically,
    bitDefault,
    bool,
    boundedEnumFrom,
    boundedEnumFromThen,
    bracket,
    bracketOnError,
    bracket_,
    break,
    byteSwap16,
    byteSwap32,
    byteSwap64,
    callStack,
    cancel,
    cancelWith,
    cast,
    castWith,
    catMaybes,
    catch,
    catchE,
    catchJust,
    catchSTM,
    catches,
    check,
    chr,
    cis,
    coerceWith,
    comparing,
    concat,
    concatMap,
    concatMapM,
    concurrently,
    conjugate,
    const,
    currentCallStack,
    curry,
    cycle,
    cycle1,
    decodeUtf8,
    decodeUtf8',
    decodeUtf8With,
    deepseq,
    denominator,
    die,
    diff,
    digitToInt,
    divZeroError,
    drop,
    dropWhile,
    dupChan,
    either,
    eitherA,
    encodeUtf8,
    eqT,
    evalState,
    evalStateT,
    evaluate,
    even,
    execState,
    execStateT,
    exitFailure,
    exitSuccess,
    exitWith,
    filter,
    filterM,
    finally,
    find,
    fix,
    fixST,
    flip,
    fmapDefault,
    foldM,
    foldM_,
    foldMapDefault,
    foldl1May,
    foldl1May',
    foldlM,
    foldr1May,
    foldrM,
    for,
    forM,
    forM_,
    for_,
    force,
    foreach,
    forever,
    forkFinally,
    forkIO,
    forkIOWithUnmask,
    forkOS,
    forkOSWithUnmask,
    forkOn,
    forkOnWithUnmask,
    fromIntegral,
    fromLeft,
    fromMaybe,
    fromRight,
    fromStrict,
    fst,
    gcast,
    gcastWith,
    gcd,
    gcdInt',
    gcdWord',
    genericDrop,
    genericLength,
    genericReplicate,
    genericSplitAt,
    genericTake,
    getArgs,
    getCallStack,
    getChanContents,
    getContents,
    getLine,
    getMaskingState,
    getNumCapabilities,
    getStackTrace,
    gets,
    group,
    groupBy,
    guard,
    guardM,
    guarded,
    guardedA,
    handle,
    handleJust,
    hashUsing,
    head,
    headDef,
    headMay,
    hush,
    identity,
    ifM,
    ignore,
    imagPart,
    infinity,
    initDef,
    initMay,
    initSafe,
    inits,
    intToDigit,
    integralEnumFrom,
    integralEnumFromThen,
    integralEnumFromThenTo,
    integralEnumFromTo,
    interact,
    intercalate,
    interruptible,
    intersperse,
    ioError,
    isAlpha,
    isAlphaNum,
    isAscii,
    isControl,
    isCurrentThreadBound,
    isDigit,
    isEmptyMVar,
    isHexDigit,
    isJust,
    isLeft,
    isLetter,
    isLower,
    isNothing,
    isPrefixOf,
    isPrint,
    isRight,
    isSpace,
    isUpper,
    iterate,
    join,
    killThread,
    lastDef,
    lastMay,
    lcm,
    leftToMaybe,
    lefts,
    lenientDecode,
    lift,
    liftA,
    liftA3,
    liftAA2,
    liftIO1,
    liftIO2,
    liftM,
    liftM',
    liftM2,
    liftM2',
    liftM3,
    liftM4,
    liftM5,
    lines,
    link,
    link2,
    list,
    listToMaybe,
    magnitude,
    map,
    mapAccumL,
    mapAccumR,
    mapAndUnzipM,
    mapExcept,
    mapExceptT,
    mapException,
    mapM_,
    mapMaybe,
    mask,
    mask_,
    maxInt,
    maximumBy,
    maximumDef,
    maximumMay,
    maybe,
    maybeEmpty,
    maybeToEither,
    maybeToLeft,
    maybeToList,
    maybeToRight,
    mfilter,
    minInt,
    minimumBy,
    minimumDef,
    minimumMay,
    mkPolar,
    mkWeakMVar,
    mkWeakThreadId,
    modify,
    modifyMVar,
    modifyMVarMasked,
    modifyMVarMasked_,
    modifyMVar_,
    msum,
    mtimesDefault,
    myThreadId,
    natVal,
    newChan,
    newEmptyMVar,
    newMVar,
    newQSem,
    newQSemN,
    nonEmpty,
    not,
    notANumber,
    notElem,
    notImplemented,
    note,
    numerator,
    numericEnumFrom,
    numericEnumFromThen,
    numericEnumFromThenTo,
    numericEnumFromTo,
    odd,
    on,
    onException,
    openFile,
    option,
    optional,
    or,
    orAlt,
    orElse,
    orEmpty,
    ord,
    ordNub,
    otherwise,
    overflowError,
    panic,
    partitionEithers,
    pass,
    permutations,
    phase,
    polar,
    poll,
    popCountDefault,
    prettyCallStack,
    prettySrcLoc,
    print,
    product,
    purer,
    putByteString,
    putErrText,
    putLByteString,
    putLText,
    putMVar,
    putText,
    race,
    race_,
    ratioPrec,
    ratioPrec1,
    ratioZeroDenominatorError,
    readChan,
    readEither,
    readFile,
    readMVar,
    readMaybe,
    reads,
    realPart,
    realToFrac,
    reduce,
    repeat,
    replace,
    replicate,
    replicateM,
    replicateM_,
    repr,
    retry,
    reverse,
    rightToMaybe,
    rights,
    rtsSupportsBoundThreads,
    runExcept,
    runExceptT,
    runInBoundThread,
    runInUnboundThread,
    runReader,
    runST,
    runState,
    scanl,
    scanl',
    scanr,
    seq,
    sequenceA_,
    sequence_,
    setNumCapabilities,
    show,
    showStackTrace,
    signalQSem,
    signalQSemN,
    snd,
    someNatVal,
    someSymbolVal,
    sort,
    sortBy,
    sortOn,
    splitAt,
    stderr,
    stdin,
    stdout,
    stimesIdempotent,
    stimesIdempotentMonoid,
    stimesMonoid,
    strictDecode,
    subsequences,
    subtract,
    sum,
    swap,
    swapMVar,
    sym,
    symbolVal,
    tailDef,
    tailMay,
    tailSafe,
    tails,
    take,
    takeMVar,
    takeWhile,
    testBitDefault,
    threadCapability,
    threadDelay,
    threadWaitRead,
    threadWaitReadSTM,
    threadWaitWrite,
    threadWaitWriteSTM,
    throwE,
    throwIO,
    throwSTM,
    throwTo,
    toIntegralSized,
    toLower,
    toStrict,
    toTitle,
    toUpper,
    toUtf8,
    toUtf8Lazy,
    trace,
    traceIO,
    traceId,
    traceM,
    traceShow,
    traceShowId,
    traceShowM,
    trans,
    transpose,
    traverse_,
    try,
    tryIO,
    tryJust,
    tryPutMVar,
    tryReadMVar,
    tryTakeMVar,
    typeOf,
    typeRep,
    uncons,
    uncurry,
    undefined,
    underflowError,
    unfoldr,
    uninterruptibleMask,
    uninterruptibleMask_,
    unless,
    unlessM,
    unlines,
    unsnoc,
    until,
    unwords,
    unzip,
    vacuous,
    void,
    wait,
    waitAny,
    waitAnyCancel,
    waitAnyCatch,
    waitAnyCatchCancel,
    waitBoth,
    waitCatch,
    waitEither,
    waitEitherCancel,
    waitEitherCatch,
    waitEitherCatchCancel,
    waitEither_,
    waitQSem,
    waitQSemN,
    when,
    whenM,
    withAsync,
    withAsyncBound,
    withAsyncOn,
    withExcept,
    withExceptT,
    withFile,
    withFrozenCallStack,
    withMVar,
    withMVarMasked,
    withState,
    witness,
    words,
    writeChan,
    writeFile,
    writeList2Chan,
    yield,
    zero,
    zip,
    zipWith,
    zipWithM,
    zipWithM_,
    (||),
    (||^),
  )
import Protolude.Base ()
import Prelude (String)

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Semiring
--------------------------------------------------------------------------------

class Monoid m => Semiring m where
  {-# MINIMAL one, times #-}

  one :: m
  times :: m -> m -> m
