-- | Generic class of errors generated by the minijuvix compiler. Inspired by
-- Control.Exception
module MiniJuvix.Prelude.Error where

import MiniJuvix.Prelude.Base
import System.Console.ANSI qualified as Ansi

-- import System.IO qualified as IO

-- | Wrapper for any instance of JuvixError.
data AJuvixError = forall e. JuvixError e => AJuvixError e

-- | Minimal interface of an minijuvix error.
class Typeable e => JuvixError e where
  -- | Print the error to stderr with Ansi formatting.
  printErrorAnsi :: e -> IO ()
  printErrorAnsi = hPutStrLn stderr . renderAnsiText

  -- | Print the error to stderr without formatting.
  printErrorText :: e -> IO ()
  printErrorText = hPutStrLn stderr . renderText

  -- | Render the error to Text.
  renderText :: e -> Text

  -- | Render the error with Ansi formatting (if any).
  renderAnsiText :: e -> Text

toAJuvixError :: JuvixError e => e -> AJuvixError
toAJuvixError = AJuvixError

fromAJuvixError :: JuvixError e => AJuvixError -> Maybe e
fromAJuvixError (AJuvixError e) = cast e

throwJuvixError :: (JuvixError err, Member (Error AJuvixError) r) => err -> Sem r a
throwJuvixError = throw . toAJuvixError

printErrorAnsiSafe :: JuvixError e => e -> IO ()
printErrorAnsiSafe e =
  ifM
    (Ansi.hSupportsANSI stderr)
    (printErrorAnsi e)
    (printErrorText e)

runErrorIO ::
  (JuvixError a, Member (Embed IO) r) =>
  Sem (Error a ': r) b ->
  Sem r b
runErrorIO =
  runError >=> \case
    Left err -> embed (printErrorAnsiSafe err >> exitFailure)
    Right a -> return a

instance JuvixError Text where
  renderText = id
  renderAnsiText = id

instance JuvixError AJuvixError where
  renderText (AJuvixError r) = renderText r
  renderAnsiText (AJuvixError r) = renderAnsiText r
  printErrorAnsi (AJuvixError r) = printErrorAnsi r
  printErrorText (AJuvixError r) = printErrorText r
