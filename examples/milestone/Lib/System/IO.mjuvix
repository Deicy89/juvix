module System.IO;

import Data.String;
open Data.String;

import Data.Bool;
open Data.Bool;

axiom Action : Type;
compile Action {
  c ↦ "int";
  ghc ↦ "IO ()";
};

axiom putStr : String → Action;
compile putStr {
  c ↦ "putStr";
  ghc ↦ "putStr";
};

axiom putStrLn : String → Action;
compile putStrLn {
  c ↦ "putStrLn";
  ghc ↦ "putStrLn";
};

foreign c {
  int sequence(int a, int b) {
    return a + b;
  \}
};

infixl 1 >>;
axiom >> : Action → Action → Action;
compile >> {
  c ↦ "sequence";
  ghc ↦ "(>>)";
};

show-result : Bool → String;
show-result true ≔ "OK";
show-result false ≔ "FAIL";

axiom readline : String;

compile readline {
  c ↦ "readline()";
};

end;
