module Data.Nat;

import Data.Bool;
open Data.Bool;

import Data.Int;
open Data.Int;

import Data.String;
open Data.String;

inductive Nat {
  zero : Nat;
  suc : Nat → Nat;
};

==Nat : Nat → Nat → Bool;
==Nat zero zero ≔ true;
==Nat (suc m) (suc n) ≔ ==Nat m n;
==Nat _ _ ≔ false;

one : Nat;
one ≔ suc zero;

two : Nat;
two ≔ suc one;

three : Nat;
three ≔ suc two;

four : Nat;
four ≔ suc three;

five : Nat;
five ≔ suc four;

six : Nat;
six ≔ suc five;

seven : Nat;
seven ≔ suc six;

eight : Nat;
eight ≔ suc seven;

nine : Nat;
nine ≔ suc eight;

ten : Nat;
ten ≔ suc nine;

plusNat : Nat → Nat → Nat;
plusNat zero n ≔ n;
plusNat (suc m) n ≔ suc (plusNat m n);

natToInt : Nat → Int;
natToInt zero ≔ 0;
natToInt (suc n) ≔ 1 + (natToInt n);

natToStr : Nat → String;
natToStr n ≔ intToStr (natToInt n);

infix 4 <Nat;
<Nat : Nat → Nat → Bool;
<Nat zero _ ≔ true;
<Nat _ zero ≔ false;
<Nat (suc m) (suc n) ≔ m <Nat n;

infix 4 >Nat;
>Nat : Nat → Nat → Bool;
>Nat _ zero ≔ true;
>Nat zero _ ≔ false;
>Nat (suc m) (suc n) ≔ m >Nat n;

infix 4 <=Nat;
<=Nat : Nat → Nat → Bool;
<=Nat l r ≔ (l <Nat r) || (==Nat l r);

infix 4 >=Nat;
>=Nat : Nat → Nat → Bool;
>=Nat l r ≔ (l >Nat r) || (==Nat l r);

foreign c {
  void* natInd(int n, void* a1, juvix_function_t* a2) {
    if (n <= 0) return a1;
    return ((void* (*) (juvix_function_t*, void*))a2->fun)(a2, natInd(n - 1, a1, a2));
  \}
};

axiom natInd : Int → Nat → (Nat → Nat) → Nat;
compile natInd {
  c ↦ "natInd";
};

from-backendNat : Int → Nat;
from-backendNat bb ≔ natInd bb zero suc;

end;
