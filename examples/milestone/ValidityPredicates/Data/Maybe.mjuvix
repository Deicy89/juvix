module Data.Maybe;

import Data.Int;
open Data.Int;

import Data.Bool;
open Data.Bool;

inductive Maybe (A : Type) {
 nothing : Maybe A;
 just : A → Maybe A;
};

-- from-int : Int → Maybe Int;
-- from-int i ≔ if (i < 0) nothing (just i);

maybe : {A : Type} → {B : Type} → B → (A → B) → Maybe A → B;
maybe b _ nothing ≔ b;
maybe _ f (just x) ≔ f x;

end;
