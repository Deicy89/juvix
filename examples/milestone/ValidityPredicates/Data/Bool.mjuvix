module Data.Bool;

--------------------------------------------------------------------------------
-- Booleans
--------------------------------------------------------------------------------

inductive Bool {
  true : Bool;
  false : Bool;
};

infixr 2 ||;
|| : Bool → Bool → Bool;
|| false a ≔ a;
|| true _ ≔ true;

infixr 3 &&;
&& : Bool → Bool → Bool;
&& false _ ≔ false;
&& true a ≔ a;

if : {A : Type} → Bool → A → A → A;
if true a _ ≔ a;
if false _ b ≔ b;

--------------------------------------------------------------------------------
-- Backend Booleans
--------------------------------------------------------------------------------

axiom BackendBool : Type;
compile BackendBool {
  c ↦ "bool";
  ghc ↦ "Bool";
};

axiom backend-true : BackendBool;
compile backend-true {
  c ↦ "true";
  ghc ↦ "True";
};

axiom backend-false : BackendBool;
compile backend-false {
  c ↦ "false";
  ghc ↦ "False";
};

foreign ghc {
  bool :: Bool -> a -> a -> a
  bool True x _ = x
  bool False _ y = y
};

foreign c {
  void* boolInd(bool b, void* a1, void* a2) {
    return b ? a1 : a2;
  \}
};


axiom bool : BackendBool → Bool → Bool → Bool;
compile bool {
  c ↦ "boolInd";
  ghc ↦ "bool";
};

from-backend-bool : BackendBool → Bool;
from-backend-bool bb ≔ bool bb true false;

end;
