module Data.List;

import Data.Bool;
open Data.Bool;

import Data.String;
open Data.String;

--------------------------------------------------------------------------------
-- Lists
--------------------------------------------------------------------------------

inductive List (A : Type) {
  nil : List A;
  cons : A → List A → List A;
};

elem : (A : Type) → (A → A → Bool) → A → List A → Bool;
elem _ _ _ nil ≔ false;
elem A eq s (cons x xs) ≔ eq s x || elem _ eq s xs;

foldl : (A : Type) → (B : Type) → (B → A → B) → B → List A → B;
foldl _ _ f z nil ≔ z;
foldl A B f z (cons h hs) ≔ foldl _ _ f (f z h) hs;

end;
