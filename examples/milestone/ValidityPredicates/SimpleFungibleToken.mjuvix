module SimpleFungibleToken;

import Anoma.Base;
open Anoma.Base;

import Prelude;
open Prelude;

--------------------------------------------------------------------------------
-- Misc
--------------------------------------------------------------------------------

pair-from-optionString : (String → Int × Bool) → Maybe String → Int × Bool;
pair-from-optionString ≔ maybe (0 , false);

--------------------------------------------------------------------------------
-- Validity Predicate
--------------------------------------------------------------------------------

change-from-key : String → Int;
change-from-key key ≔ unwrap-default (read-post key) - unwrap-default (read-pre key);

check-vp : List String → String → Int → String → Int × Bool;
check-vp verifiers key change owner ≔
    if
        (change-from-key key < 0)
        -- make sure the spender approved the transaction
        (change + (change-from-key key), elem (==String) owner verifiers)
        (change + (change-from-key key),  true);

check-keys : String → List String → Int × Bool → String → Int × Bool;
check-keys token verifiers (change , is-success) key ≔
    if
        is-success
        (pair-from-optionString (check-vp verifiers key change) (is-balance-key token key))
        (0 , false);

check-result : Int × Bool → Bool;
check-result (change , all-checked) ≔ (change ==Int 0) && all-checked;

vp : String → List String → List String → Bool;
vp token keys-changed verifiers ≔
    check-result
        (foldl
            (check-keys token verifiers)
            (0 , true)
            keys-changed);
end;
